'''Report CKAN user statistics'''

import ckan.model as model

import sqlalchemy as sa

import json as json
import os as os
from datetime import datetime

import logging
log = logging.getLogger('ckanext.statreports.user')

def _table(name):
    return sa.Table(name, model.meta.metadata, autoload=True)


class UserStats(object):
    '''User statistics'''

    @staticmethod
    def total_users():
        '''
        Return total user count

        :return: count
        '''
        return model.Session.query(model.User.id).count()

    @classmethod
    def users_by_month(cls):
        '''
        New users by month

        :return: count
        '''
        user = _table('user')
        q = sa.select([sa.func.count('id'), sa.extract('year', user.c.created),
                       sa.extract('month', user.c.created)],
                      from_obj=[user]).\
            group_by('anon_1', 'anon_2').\
            order_by('anon_1', 'anon_2')
        res = model.Session.execute(q).fetchall()
        ret = {}
        for count, anon_1, anon_2 in res:
            # key = unicode(int(anon_1)) + "/" + unicode(int(anon_2))
            key = '%s-%02d' % (int(anon_1), int(anon_2))
            ret[key] = int(count)

        return ret

    @staticmethod
    def total_visitors(engine, year_month=None):
        '''
        Return total unique visitor count

        :param engine:
        :return: visitor count
        '''
        if year_month:
            sql = '''SELECT count(DISTINCT user_key) FROM tracking_raw
                     WHERE to_char(access_timestamp, 'YYYY-MM') LIKE %(year_month)s'''
        else:
            sql = 'SELECT count(DISTINCT user_key) FROM tracking_raw'

        return engine.execute(sql, year_month=year_month).fetchone()[0]

    @staticmethod
    def total_logged_in(year_month=None):
        '''
        Return logged in visitors. Data accessed here is generated by script.
        Reads /opt/data/ckan/pyenv/logins.json. File contents aren't trusted.

        :param year_month: yyyy-mm or None
        :return: logged in visitor count
        '''

        fh = '/opt/data/ckan/pyenv/logins.json'

        ret = 0
        if not (os.path.isfile(fh) and os.access(fh, os.R_OK)):
            return None
        try:
            json_data = open(fh).read()
            data = json.loads(json_data)
            if year_month:
                return data.get('items').get(year_month, None)

            for key, value in data.get('items').iteritems():
                if isinstance(value, int):
                    ret += value

        except (ValueError, TypeError) as e:
            ret = None
            log.error('Statreports total_logged_in failed. Faulty json {filename}: {err}'
                      .format(filename=fh, err=e))
        return ret
